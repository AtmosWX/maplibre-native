{"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"sections":[],"kind":"article","abstract":[{"text":"Using ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" with MapLibre iOS"}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true,"title":"Other Articles"}],"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"text":" in Objective-C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Predicates are based on "},{"inlineContent":[{"type":"text","text":"expressions"}],"type":"emphasis"},{"text":", represented by the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"type":"text","text":" "},{"text":"expressions, consult the","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","isActive":true}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true,"type":"reference"},{"type":"text","text":" header."}]},{"text":"Using predicates to filter vector data","level":2,"type":"heading","anchor":"Using-predicates-to-filter-vector-data"},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"text":" ","type":"text"},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"condition that you define."}]},{"type":"heading","text":"Operators","anchor":"Operators","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key <= value","type":"codeVoice"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key > value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"inlineContent":[{"code":"key < value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}],"type":"paragraph"}]]],"header":"row"},{"inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute to "},{"code":"NULL","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":". Predicates created using the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"type":"text","text":" "},{"text":"operators and custom operators are not supported.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"NOT predicate","type":"codeVoice"},{"code":"!predicate","type":"codeVoice"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"IN"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing","syntax":"objc"},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"ALL haystack != needle","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}]}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"type":"text","text":"(for locale sensitivity) and "},{"code":"n","type":"codeVoice"},{"text":" (for normalization). A comparison is","type":"text"},{"text":" ","type":"text"},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"type":"text","text":" "},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"type":"text","text":" "},{"text":"like ","type":"text"},{"code":"ALL","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ANY","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Operands","type":"heading","level":3,"anchor":"Operands"},{"type":"paragraph","inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"text":", ","type":"text"},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or almost anything else that can appear"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"text":" ","type":"text"},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"text":" on iOS and ","type":"text"},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast an "},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" or "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"text":" ","type":"text"},{"inlineContent":[{"type":"reference","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}]},{"level":2,"text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}]},{"level":3,"type":"heading","anchor":"Constant-values","text":"Constant values"},{"inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"inlineContent":[{"text":"In Swift","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[String]"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}]]],"header":"row"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Key paths","anchor":"Key-paths"},{"type":"paragraph","inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":" "},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"code":"floorCount","type":"codeVoice"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"type":"text","text":"polygon."}]},{"inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"type":"text","text":" "},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Attribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"cluster","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifier for the point cluster."}]}]],[[{"inlineContent":[{"text":"point_count","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"text":" ","type":"text"},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"text":", an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"type":"text","text":" or a predicate format"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"text":" ","type":"text"},{"code":"%K","type":"codeVoice"},{"text":" placeholder or the ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"text":" initializer:","type":"text"}]},{"code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"type":"codeListing","syntax":"objc"},{"syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing"},{"type":"heading","text":"Functions","anchor":"Functions","level":3},{"inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},{"type":"text","text":" "},{"type":"text","text":"by the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the following subset is supported in layer attribute values:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"average:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"max:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"add:to:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"1 + 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from:subtract:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 * 2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"divide:by:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ln:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 ** 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"abs:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"trunc:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"floor:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"uppercase:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"noindex:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}]}]],[[{"inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}]}]]]},{"inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"type":"text","text":" are also"},{"type":"text","text":" "},{"text":"available.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"text":" supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"median:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"stddev:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"random"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"inlineContent":[{"code":"randomn(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now"}]}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"onesComplement:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"type":"table","header":"row"},{"type":"heading","text":"Conditionals","anchor":"Conditionals","level":3},{"inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" ","type":"text"},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" operator. If you need to express multiple cases"},{"text":" ","type":"text"},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"identifier":"#code-mgl_if-code","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"#code-mgl_match-code","type":"reference","isActive":true},{"text":" function.","type":"text"}],"type":"paragraph"},{"anchor":"Aggregates","text":"Aggregates","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}]},{"anchor":"Variables","level":3,"type":"heading","text":"Variables"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Variable","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"inlineContent":[{"text":"Meaning","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}]}],[{"type":"paragraph","inlineContent":[{"text":"Any GeoJSON data type","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"LineString"},{"text":" for polyline features, corresponding to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" class"},{"text":"This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the ","type":"text"},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"code":"NSExpression.heatmapDensityVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$lineProgress","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"text":" ","type":"text"},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"isActive":true,"overridingTitle":"MapLibre-specific function","overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"type":"reference","identifier":"#MapLibre-specific-functions"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"syntax":"swift","type":"codeListing","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"level":2,"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions","type":"heading"},{"name":"Warning","type":"aside","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"reference","isActive":true},{"type":"text","text":" for more information and workarounds."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"text":" ","type":"text"},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}]},{"anchor":"mgldoeshave","level":3,"type":"heading","text":"mgl_does:have:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"text":"key or whether the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","isActive":true,"type":"reference"},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"type":"codeVoice","code":"key != NIL"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"code":"%@[key] != NIL","type":"codeVoice"},{"type":"text","text":" but can be used outside of a predicate."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"type":"text","text":" "},{"type":"text","text":"output values (“stops”). Compared to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_step:from:stops:","anchor":"mglstepfromstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, the input expression (that function’s target) is instead passed in as"},{"type":"text","text":" "},{"text":"the first argument to this function.","type":"text"}],"type":"paragraph"},{"text":"mgl_join:","level":3,"anchor":"mgljoin","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_join:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"type":"text","text":" "},{"text":"order. Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression containing the strings to concatenate.","type":"text"}]},{"type":"heading","level":3,"anchor":"mglacos","text":"mgl_acos:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","text":"mgl_asin:","level":3,"anchor":"mglasin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_atan:","type":"heading","level":3,"anchor":"mglatan"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_cos:","level":3,"anchor":"mglcos"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the cosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","text":"mgl_log2:","level":3,"anchor":"mgllog2"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_round:","type":"heading","anchor":"mglround","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"text":" ","type":"text"},{"text":"between two integers, this function rounds it away from zero.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglsin","type":"heading","level":3,"text":"mgl_sin:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the sine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"text":"mgl_tan:","anchor":"mgltan","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgldistanceFrom","text":"mgl_distanceFrom:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"type":"codeVoice","code":"MLNShape"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_coalesce:","level":3,"anchor":"mglcoalesce","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_attributed:","level":3,"type":"heading","anchor":"mglattributed"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_attributed:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"type":"text","text":" property."}]},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"text":" valid attributes.","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"text":" array.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontScaleAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS) or "},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)."}],"type":"paragraph"}]]],"header":"row"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"anchor":"MLNLET","text":"MLN_LET","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Any number of variable names interspersed with their assigned","type":"text"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}]},{"inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"text":" ","type":"text"},{"text":"Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_expressionwithcontext-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"type":"heading","text":"MLN_MATCH","anchor":"MLNMATCH","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"text":" ","type":"text"},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"text":" ","type":"text"},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_IF","level":3,"type":"heading","anchor":"MLNIF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_IF:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"type":"text","text":" "},{"text":"value. Unlike","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and is supported on iOS 8."},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNFUNCTION","type":"heading","text":"MLN_FUNCTION","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Custom functions","anchor":"Custom-functions","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"text":" method or the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" format string syntax."}]},{"type":"paragraph","inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"text":" ","type":"text"},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"type":"text","text":" "},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_function-code","isActive":true},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}]},{"anchor":"boolValue","level":3,"type":"heading","text":"boolValue"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" None."}]},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":", or ","type":"text"},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"mglhas","type":"heading","text":"mgl_has:","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"text":"or the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"text":"object has a value for the feature attribute.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"text":" function, which is used on its own","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator. You can also check whether an object has an"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"code":"burger.cheese != NIL","type":"codeVoice"}],"type":"paragraph"},{"text":"mgl_expressionWithContext:","type":"heading","anchor":"mglexpressionWithContext","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary containing "},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value is the variable’s value within the target expression."}]},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"anchor":"mglinterpolateWithCurveTypeparametersstops","level":3,"type":"heading","text":"mgl_interpolateWithCurveType:parameters:stops:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"linear"},{"text":", ","type":"text"},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"linear","type":"codeVoice"},{"type":"text","text":", the argument is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"text":" ","type":"text"},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"arguments, with the target as the input to the function."}]},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"anchor":"mglnumberWithFallbackValues","level":3,"type":"heading","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true,"type":"reference"},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"type":"text","text":"number by passing the value and the string "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"type":"text","text":"second argument."}]},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"stringByAppendingString","text":"stringByAppendingString:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"stringByAppendingString:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}]},{"inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and is similar to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_join-code","isActive":true,"type":"reference"},{"text":" function, which concatenates multiple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"text":"stringValue","type":"heading","level":3,"anchor":"stringValue"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"None.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"text":", the result is the empty string.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"code":"true","type":"codeVoice"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"text":", where ","type":"text"},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"type":"text","text":" "},{"text":"function of the ECMAScript Language Specification.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"type":"text","text":"string by passing the value and the string "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"article","title":"Predicates and expressions","roleHeading":"Article","modules":[{"name":"MapLibre"}]},"references":{"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"title":"interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"titleInlineContent":[{"code":"cos","type":"codeVoice"}],"title":"cos","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"role":"symbol","kind":"symbol","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"type":"text","text":" code. A shape source is added to an"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"text":" or ","type":"text"},{"code":"URL","type":"codeVoice"},{"type":"text","text":" property."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"title":"MLNShapeSource","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"type":"codeVoice","code":"let"}],"title":"let","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"#code-mgl_expressionwithcontext-code":{"titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"title":"mgl_expressionWithContext:","type":"link","url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","role":"article","type":"topic","abstract":[{"type":"text","text":"Using custom fonts"}],"title":"Customizing Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","kind":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"type":"topic","title":"User Interactions","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"role":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","titleInlineContent":[{"type":"codeVoice","code":"match"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"titleInlineContent":[{"code":"sin","type":"codeVoice"}],"title":"sin","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"#using-expressions-to-configure-layout-and-paint-attributes":{"type":"link","url":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","titleInlineContent":[{"type":"text","text":"inside an expression"}],"identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"title":"to-string","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"titleInlineContent":[{"code":"case","type":"codeVoice"}],"title":"case","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"#code-mgl_match-code":{"type":"link","url":"#code-mgl_match-code","title":"MLN_MATCH()","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"identifier":"#code-mgl_match-code"},"#MapLibre-specific-functions":{"titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"title":"MapLibre-specific functions","type":"link","url":"#MapLibre-specific-functions","identifier":"#MapLibre-specific-functions"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"type":"topic","title":"Adding Multiple Images","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}],"role":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"type":"link","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"titleInlineContent":[{"code":"atan","type":"codeVoice"}],"title":"atan","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"#code-mgl_has-code":{"identifier":"#code-mgl_has-code","url":"#code-mgl_has-code","title":"mgl_has:","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","role":"article","type":"topic","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"title":"Info.plist Keys","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","kind":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"type":"topic","title":"Tile URL Templates","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"role":"article","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"titleInlineContent":[{"code":"tan","type":"codeVoice"}],"title":"tan","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"titleInlineContent":[{"code":"asin","type":"codeVoice"}],"title":"asin","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"title":"MapLibre Style Spec","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"titleInlineContent":[{"code":"round","type":"codeVoice"}],"title":"round","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"titleInlineContent":[{"type":"text","text":"functions predefined"}],"title":"functions predefined","type":"link","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"code":"format","type":"codeVoice"}],"title":"format","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"#code-stringbyappendingstring-code":{"identifier":"#code-stringbyappendingstring-code","url":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"type":"link"},"#variables":{"titleInlineContent":[{"type":"text","text":"variables"}],"title":"variables","type":"link","url":"#variables","identifier":"#variables"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","kind":"symbol","url":"\/documentation\/maplibre\/mlnpolygon","abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"fragments":[{"kind":"identifier","text":"MLNPolygon"}],"role":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"title":"coalesce","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:"},"#code-mgl_does-have-code":{"type":"link","title":"mgl_does:have:","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"identifier":"#code-mgl_does-have-code","url":"#code-mgl_does-have-code"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"type":"link","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}],"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://github.com/maplibre/maplibre-native/issues/331":{"title":"#331","titleInlineContent":[{"text":"#331","type":"text"}],"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"type":"text","text":" "},{"text":"specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the line segments that","type":"text"},{"type":"text","text":" "},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}],"kind":"symbol","title":"MLNPolyline","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","url":"\/documentation\/maplibre\/mlnpolyline","type":"topic","role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection","url":"\/documentation\/maplibre","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"type":"topic","kind":"symbol","title":"MapLibre"},"#code-mgl_let-code":{"type":"link","title":"MLN_LET","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"identifier":"#code-mgl_let-code","url":"#code-mgl_let-code"},"#code-mgl_stepwithminimum-stops-code":{"title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"identifier":"#code-mgl_stepwithminimum-stops-code","url":"#code-mgl_stepwithminimum-stops-code","type":"link"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"type":"link","title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"#key-paths":{"title":"key paths","titleInlineContent":[{"text":"key paths","type":"text"}],"identifier":"#key-paths","url":"#key-paths","type":"link"},"#code-mgl_join-code":{"type":"link","title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"identifier":"#code-mgl_join-code","url":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"code":"has","type":"codeVoice"}],"title":"has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","kind":"article","title":"Information for Style Authors","role":"article","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","title":"NSExpression+MLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#code-mgl_function-code":{"url":"#code-mgl_function-code","title":"MLN_FUNCTION()","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"identifier":"#code-mgl_function-code","type":"link"},"#code-mgl_if-code":{"type":"link","title":"MLN_IF()","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}],"url":"#code-mgl_if-code","identifier":"#code-mgl_if-code"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2","titleInlineContent":[{"code":"log2","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"kind":"symbol","title":"lineGradient","role":"symbol","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"text":".","type":"text"}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"topic","fragments":[{"kind":"identifier","text":"lineGradient"}]},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","title":"NumberToString","titleInlineContent":[{"type":"text","text":"NumberToString"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GeoJSON":{"title":"Working with GeoJSON Data","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/geojson","abstract":[],"role":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link"}}}