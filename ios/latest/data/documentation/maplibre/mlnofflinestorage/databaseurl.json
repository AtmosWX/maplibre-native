{"sections":[],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre\/mlnofflinestorage\/databaseurl"]}],"metadata":{"title":"databaseURL","externalID":"c:objc(cs)MLNOfflineStorage(py)databaseURL","role":"symbol","symbolKind":"property","navigatorTitle":[{"text":"databaseURL","kind":"identifier"}],"modules":[{"name":"MapLibre"}],"roleHeading":"Instance Property","fragments":[{"kind":"identifier","text":"databaseURL"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre","doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage"]]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/databaseURL","interfaceLanguage":"occ"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["occ"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"@property"},{"kind":"text","text":" ("},{"kind":"keyword","text":"nonatomic"},{"kind":"text","text":", "},{"text":"copy","kind":"keyword"},{"kind":"text","text":", "},{"kind":"keyword","text":"readonly"},{"kind":"text","text":") "},{"text":"NSURL","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSURL"},{"kind":"text","text":" * "},{"text":"databaseURL","kind":"identifier"},{"kind":"text","text":";"}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To customize this path, specify the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLNOfflineStorageDatabasePath"},{"type":"text","text":" key in Info.plist, see "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"symbol","abstract":[{"type":"text","text":"The file URL at which offline packs and the ambient cache are stored."}],"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/databaseURL":{"url":"\/documentation\/maplibre\/mlnofflinestorage\/databaseurl","title":"databaseURL","type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"The file URL at which offline packs and the ambient cache are stored."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/databaseURL","fragments":[{"kind":"identifier","text":"databaseURL"}]},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","url":"\/documentation\/maplibre","title":"MapLibre","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage":{"title":"MLNOfflineStorage","fragments":[{"text":"MLNOfflineStorage","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnofflinestorage","kind":"symbol","abstract":[{"text":"MLNOfflineStorage implements a singleton (shared object) that manages offline","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"packs and ambient caching. All of this classâ€™s instance methods are asynchronous,"},{"text":" ","type":"text"},{"type":"text","text":"reflecting the fact that offline resources are stored in a database. The shared"},{"type":"text","text":" "},{"text":"object maintains a canonical collection of offline packs in its ","type":"text"},{"code":"packs","type":"codeVoice"},{"text":" property.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","type":"topic","role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"role":"article","title":"Info.plist Keys","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}],"kind":"article","type":"topic"}}}