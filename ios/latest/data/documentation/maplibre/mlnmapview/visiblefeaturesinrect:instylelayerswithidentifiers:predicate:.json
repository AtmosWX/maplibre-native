{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["occ"],"tokens":[{"text":"- (","kind":"text"},{"kind":"typeIdentifier","text":"NSArray<id<MLNFeature>>","preciseIdentifier":"c:Q$objc(cs)NSArray"},{"kind":"text","text":" *) "},{"text":"visibleFeaturesInRect:","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:@S@CGRect","text":"CGRect","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"internalParam","text":"rect"},{"text":" ","kind":"text"},{"text":"inStyleLayersWithIdentifiers:","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:Q$objc(cs)NSSet","text":"NSSet<NSString *>","kind":"typeIdentifier"},{"kind":"text","text":" *) "},{"kind":"internalParam","text":"styleLayerIdentifiers"},{"kind":"text","text":" "},{"kind":"identifier","text":"predicate:"},{"text":"(","kind":"text"},{"text":"NSPredicate","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSPredicate"},{"kind":"text","text":" *) "},{"kind":"internalParam","text":"predicate"},{"text":";","kind":"text"}],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A rectangle expressed in the map view’s coordinate system."}]}],"name":"rect"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A set of strings that correspond to the names of","type":"text"},{"type":"text","text":" "},{"text":"layers defined in the current style. Only the features contained in these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"layers are included in the returned array."}]}],"name":"styleLayerIdentifiers"},{"name":"predicate","content":[{"inlineContent":[{"type":"text","text":"A predicate to filter the returned features."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An array of objects conforming to the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" protocol that"},{"text":" ","type":"text"},{"text":"represent features in the sources used by the current style.","type":"text"}]}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Each object in the returned array represents a feature rendered by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"current style and provides access to attributes specified by the relevant map"},{"text":" ","type":"text"},{"type":"text","text":"content sources. The returned array includes features loaded by"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLNShapeSource"},{"type":"text","text":" and "},{"type":"codeVoice","code":"MLNVectorTileSource"},{"text":" objects but does not include","type":"text"},{"type":"text","text":" "},{"text":"anything from ","type":"text"},{"code":"MLNRasterTileSource","type":"codeVoice"},{"type":"text","text":" objects, or from video or canvas sources,"},{"type":"text","text":" "},{"text":"which are unsupported by this SDK.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The returned features are drawn by a style layer in the current style. For"},{"type":"text","text":" "},{"type":"text","text":"example, suppose the current style uses a particular source,"},{"text":" ","type":"text"},{"type":"text","text":"but none of the specified style layers includes features that have the "},{"type":"codeVoice","code":"maki"},{"text":" ","type":"text"},{"type":"text","text":"property set to "},{"code":"bus","type":"codeVoice"},{"type":"text","text":". If you pass a rectangle containing the location of a bus"},{"text":" ","type":"text"},{"text":"stop into this method, the bus stop feature does not appear in the resulting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array. On the other hand, if the style does include bus stops, an "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"object representing that bus stop is returned and its "},{"code":"featureAttributes","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"dictionary has the "},{"type":"codeVoice","code":"maki"},{"type":"text","text":" key set to "},{"code":"bus","type":"codeVoice"},{"text":" (along with other attributes). The","type":"text"},{"type":"text","text":" "},{"text":"dictionary contains only the attributes provided by the tile source; it does","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not include computed attribute values or rules about how the feature is"},{"type":"text","text":" "},{"type":"text","text":"rendered by the current style."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The returned array is sorted by z-order, starting with the topmost rendered"},{"type":"text","text":" "},{"type":"text","text":"feature and ending with the bottommost rendered feature. A feature that is"},{"text":" ","type":"text"},{"type":"text","text":"rendered multiple times due to wrapping across the antimeridian at low zoom"},{"type":"text","text":" "},{"type":"text","text":"levels is included only once, subject to the caveat that follows."}]},{"inlineContent":[{"type":"text","text":"Features come from tiled vector data or GeoJSON data that is converted to tiles"},{"type":"text","text":" "},{"type":"text","text":"internally, so feature geometries are clipped at tile boundaries and features"},{"text":" ","type":"text"},{"type":"text","text":"may appear duplicated across tiles. For example, suppose the specified"},{"text":" ","type":"text"},{"type":"text","text":"rectangle intersects with a road that spans the screen. The resulting array"},{"type":"text","text":" "},{"text":"includes those parts of the road that lie within the map tiles covering the","type":"text"},{"text":" ","type":"text"},{"text":"specified rectangle, even if the road extends into other tiles. The portion of","type":"text"},{"type":"text","text":" "},{"text":"the road within each map tile is included individually.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To find out the layer names in a particular style, view the style in","type":"text"},{"type":"text","text":" "},{"text":"Maputnik","type":"text"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Only visible features are returned. To obtain features regardless of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"visibility, use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[MLNVectorTileSource featuresInSourceLayersWithIdentifiers:predicate:]"},{"text":" and","type":"text"},{"type":"text","text":" "},{"code":"-[MLNShapeSource featuresMatchingPredicate:]","type":"codeVoice"},{"text":" methods on the relevant sources.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"versions of the same style. Applications that use this API must first set the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"style URL to an explicitly versioned style using a convenience method like"},{"text":" ","type":"text"},{"code":"+[MLNStyle outdoorsStyleURLWithVersion:]","type":"codeVoice"},{"type":"text","text":", "},{"code":"MLNMapView","type":"codeVoice"},{"type":"text","text":"’s “Style URL”"},{"text":" ","type":"text"},{"text":"inspectable in Interface Builder, or a manually constructed ","type":"text"},{"type":"codeVoice","code":"NSURL"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"approach also avoids layer identifer name changes that will occur in the"},{"type":"text","text":" "},{"text":"default style’s layers over time.","type":"text"}]},{"code":["versions of the same style. Applications that use this API must first set","the style URL to an explicitly versioned style using a convenience method","like `+[MLNStyle outdoorsStyleURLWithVersion:]`, `MLNMapView`’s “Style URL”","inspectable in Interface Builder, or a manually constructed `NSURL`. This","approach also avoids layer identifer name changes that will occur in the","default style’s layers over time."],"type":"codeListing","syntax":null}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre","doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView"]]},"abstract":[{"text":"Returns an array of rendered map features that intersect with the given","type":"text"},{"text":" ","type":"text"},{"text":"rectangle, restricted to the given style layers and filtered by the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre\/mlnmapview\/visiblefeaturesinrect:instylelayerswithidentifiers:predicate:"]}],"sections":[],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView\/visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","metadata":{"symbolKind":"method","roleHeading":"Instance Method","title":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","navigatorTitle":[{"kind":"identifier","text":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:"}],"fragments":[{"text":"- ","kind":"text"},{"text":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","kind":"identifier"}],"externalID":"c:objc(cs)MLNMapView(im)visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","role":"symbol","modules":[{"name":"MapLibre"}]},"references":{"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","url":"\/documentation\/maplibre","title":"MapLibre","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"kind":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"url":"\/documentation\/maplibre\/mlnmapview","abstract":[{"type":"text","text":"An interactive, customizable map view with an interface similar to the one"},{"text":" ","type":"text"},{"type":"text","text":"provided by Apple’s MapKit."}],"type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"MLNMapView"}],"title":"MLNMapView","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","kind":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView/visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:":{"title":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","type":"topic","fragments":[{"text":"- ","kind":"text"},{"text":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","kind":"identifier"}],"navigatorTitle":[{"text":"visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnmapview\/visiblefeaturesinrect:instylelayerswithidentifiers:predicate:","abstract":[{"type":"text","text":"Returns an array of rendered map features that intersect with the given"},{"type":"text","text":" "},{"type":"text","text":"rectangle, restricted to the given style layers and filtered by the given"},{"type":"text","text":" "},{"text":"predicate.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView\/visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:","kind":"symbol","role":"symbol"}}}